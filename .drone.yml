workspace:
  base: /go
  path: src/github.com/ichiaohsu/drone-slack

pipeline:
  test:
    image: golang:1.11
    pull: true
    environment:
      - GO111MODULE=on
    commands:
      - go vet ./...
      - go test -cover ./...

  build_linux_amd64:
    image: golang:1.11
    pull: true
    # group: build
    environment:
      - GOOS=linux
      - GOARCH=amd64
      - CGO_ENABLED=0
      - GO111MODULE=on
    commands:
      - |
        if test "${DRONE_TAG}" = ""; then
          go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/amd64/drone-slack
        else
          go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/amd64/drone-slack
        fi
  #build_linux_i386:
  #  image: golang:1.11
  #  pull: true
  #  group: build
  #  environment:
  #    - GOOS=linux
  #    - GOARCH=386
  #    - CGO_ENABLED=0
  #    - GO111MODULE=on
  #  commands:
  #    - |
  #      if test "${DRONE_TAG}" = ""; then
  #        go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/i386/drone-slack
  #      else
  #        go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/i386/drone-slack
  #      fi
  #build_linux_arm64:
  #  image: golang:1.11
  #  pull: true
  #  group: build
  #  environment:
  #    - GOOS=linux
  #    - GOARCH=arm64
  #    - CGO_ENABLED=0
  #    - GO111MODULE=on
  #  commands:
  #    - |
  #      if test "${DRONE_TAG}" = ""; then
  #        go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm64/drone-slack
  #      else
  #        go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm64/drone-slack
  #      fi
  #build_linux_arm:
  #  image: golang:1.11
  #  pull: true
  #  group: build
  #  environment:
  #    - GOOS=linux
  #    - GOARCH=arm
  #    - CGO_ENABLED=0
  #    - GOARM=7
  #    - GO111MODULE=on
  #  commands:
  #    - |
  #      if test "${DRONE_TAG}" = ""; then
  #        go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm/drone-slack
  #      else
  #        go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/arm/drone-slack
  #      fi
  publish_linux_amd64:
    image: plugins/gcr
    repo: mirrormedia-1470651750304/${DRONE_REPO_NAME}
    tag:
      - ${DRONE_COMMIT_SHA:0:7}
      - latest
    dockerfile: docker/Dockerfile.linux.amd64
    environment:
      - DOCKER_LAUNCH_DEBUG=true
    secrets: [google_credentials]
    when:
      event: [push]
      branch: [master]
    # pull: true
    # secrets: [ docker_username, docker_password ]
---
# kind: pipeline
# name: testing
#
# platform:
#   os: linux
#   arch: amd64
#
# steps:
# - name: vet
#   pull: always
#   image: golang:1.11
#   commands:
#   - go vet ./...
#   environment:
#     GO111MODULE: on
#
# - name: test
#   pull: always
#   image: golang:1.11
#   commands:
#   - go test -cover ./...
#   environment:
#     GO111MODULE: on
#
# trigger:
#   branch:
#   - master
#
# ---
# kind: pipeline
# name: linux-amd64
#
# platform:
#   os: linux
#   arch: amd64
#
# steps:
# - name: build-push
#   pull: always
#   image: golang:1.11
#   commands:
#   - "go build -v -ldflags \"-X main.build=${DRONE_BUILD_NUMBER}\" -a -o release/linux/amd64/drone-slack"
#   environment:
#     CGO_ENABLED: 0
#     GO111MODULE: on
#   when:
#     event:
#     - push
#     - pull_request
#
# - name: build-tag
#   pull: always
#   image: golang:1.11
#   commands:
#   - "go build -v -ldflags \"-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}\" -a -o release/linux/amd64/drone-slack"
#   environment:
#     CGO_ENABLED: 0
#     GO111MODULE: on
#   when:
#     event:
#     - tag
#
# - name: executable
#   pull: always
#   image: golang:1.11
#   commands:
#   - ./release/linux/amd64/drone-slack --help
#
# - name: dryrun
#   pull: always
#   image: plugins/docker:linux-amd64
#   settings:
#     dockerfile: docker/Dockerfile.linux.amd64
#     dry_run: true
#     password:
#       from_secret: docker_password
#     repo: plugins/slack
#     tags: linux-amd64
#     username:
#       from_secret: docker_username
#   when:
#     event:
#     - pull_request
#
# - name: publish
#   pull: always
#   image: plugins/docker:linux-amd64
#   settings:
#     auto_tag: true
#     auto_tag_suffix: linux-amd64
#     dockerfile: docker/Dockerfile.linux.amd64
#     password:
#       from_secret: docker_password
#     repo: plugins/slack
#     username:
#       from_secret: docker_username
#   when:
#     event:
#     - push
#     - tag
#
# trigger:
#   branch:
#   - master
#
# depends_on:
# - testing
#
# ---
# kind: pipeline
# name: linux-arm64
#
# platform:
#   os: linux
#   arch: arm64
#
# steps:
# - name: build-push
#   pull: always
#   image: golang:1.11
#   commands:
#   - "go build -v -ldflags \"-X main.build=${DRONE_BUILD_NUMBER}\" -a -o release/linux/arm64/drone-slack"
#   environment:
#     CGO_ENABLED: 0
#     GO111MODULE: on
#   when:
#     event:
#     - push
#     - pull_request
#
# - name: build-tag
#   pull: always
#   image: golang:1.11
#   commands:
#   - "go build -v -ldflags \"-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}\" -a -o release/linux/arm64/drone-slack"
#   environment:
#     CGO_ENABLED: 0
#     GO111MODULE: on
#   when:
#     event:
#     - tag
#
# - name: executable
#   pull: always
#   image: golang:1.11
#   commands:
#   - ./release/linux/arm64/drone-slack --help
#
# - name: dryrun
#   pull: always
#   image: plugins/docker:linux-arm64
#   settings:
#     dockerfile: docker/Dockerfile.linux.arm64
#     dry_run: true
#     password:
#       from_secret: docker_password
#     repo: plugins/slack
#     tags: linux-arm64
#     username:
#       from_secret: docker_username
#   when:
#     event:
#     - pull_request
#
# - name: publish
#   pull: always
#   image: plugins/docker:linux-arm64
#   settings:
#     auto_tag: true
#     auto_tag_suffix: linux-arm64
#     dockerfile: docker/Dockerfile.linux.arm64
#     password:
#       from_secret: docker_password
#     repo: plugins/slack
#     username:
#       from_secret: docker_username
#   when:
#     event:
#     - push
#     - tag
#
# trigger:
#   branch:
#   - master
#
# depends_on:
# - testing
#
# ---
# kind: pipeline
# name: linux-arm
#
# platform:
#   os: linux
#   arch: arm
#
# steps:
# - name: build-push
#   pull: always
#   image: golang:1.11
#   commands:
#   - "go build -v -ldflags \"-X main.build=${DRONE_BUILD_NUMBER}\" -a -o release/linux/arm/drone-slack"
#   environment:
#     CGO_ENABLED: 0
#     GO111MODULE: on
#   when:
#     event:
#     - push
#     - pull_request
#
# - name: build-tag
#   pull: always
#   image: golang:1.11
#   commands:
#   - "go build -v -ldflags \"-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}\" -a -o release/linux/arm/drone-slack"
#   environment:
#     CGO_ENABLED: 0
#     GO111MODULE: on
#   when:
#     event:
#     - tag
#
# - name: executable
#   pull: always
#   image: golang:1.11
#   commands:
#   - ./release/linux/arm/drone-slack --help
#
# - name: dryrun
#   pull: always
#   image: plugins/docker:linux-arm
#   settings:
#     dockerfile: docker/Dockerfile.linux.arm
#     dry_run: true
#     password:
#       from_secret: docker_password
#     repo: plugins/slack
#     tags: linux-arm
#     username:
#       from_secret: docker_username
#   when:
#     event:
#     - pull_request
#
# - name: publish
#   pull: always
#   image: plugins/docker:linux-arm
#   settings:
#     auto_tag: true
#     auto_tag_suffix: linux-arm
#     dockerfile: docker/Dockerfile.linux.arm
#     password:
#       from_secret: docker_password
#     repo: plugins/slack
#     username:
#       from_secret: docker_username
#   when:
#     event:
#     - push
#     - tag
#
# trigger:
#   branch:
#   - master
#
# depends_on:
# - testing
#
# ---
# kind: pipeline
# name: notifications
#
# platform:
#   os: linux
#   arch: amd64
#
# steps:
# - name: manifest
#   pull: always
#   image: plugins/manifest:1
#   settings:
#     ignore_missing: true
#     password:
#       from_secret: docker_password
#     spec: docker/manifest.tmpl
#     username:
#       from_secret: docker_username
#
# - name: microbadger
#   pull: always
#   image: plugins/webhook:1
#   settings:
#     url:
#       from_secret: microbadger_url
#
# trigger:
#   branch:
#   - master
#   event:
#   - push
#   - tag
#
# depends_on:
# - linux-amd64
# - linux-arm64
# - linux-arm
#
# ...
#
